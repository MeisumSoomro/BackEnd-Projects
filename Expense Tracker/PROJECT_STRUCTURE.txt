EXPENSE TRACKER CLI - PROJECT STRUCTURE
=====================================

Root Directory
-------------
expense-tracker/
├── src/                      # Source code directory
│   ├── commands/            # Command implementations
│   │   ├── add.js          # Add expense command
│   │   ├── budget.js       # Budget management
│   │   ├── category.js     # Category management
│   │   ├── delete.js       # Delete expense command
│   │   ├── export.js       # Export functionality
│   │   ├── list.js         # List expenses command
│   │   ├── report.js       # Reporting features
│   │   ├── summary.js      # Summary generation
│   │   └── update.js       # Update expense command
│   ├── models/             # Data models
│   │   └── expense.js      # Expense model definition
│   ├── utils/              # Utility functions
│   │   ├── errors.js       # Custom error classes
│   │   └── storage.js      # Data storage handling
│   └── index.js            # Main CLI entry point
├── data/                   # Data storage directory
│   ├── expenses.json       # Main data storage file
│   └── expenses.json.backup # Automatic backup file
├── docs/                   # Documentation
│   ├── commands.txt        # Command reference
│   └── API.md             # API documentation
└── package.json           # Project configuration

Component Relationships
----------------------
1. Command Flow:
   index.js → commands/* → models/expense.js → utils/storage.js → data/expenses.json

2. Data Flow:
   User Input → Validation → Business Logic → Storage → User Feedback

3. Error Handling:
   utils/errors.js ← All Components

File Purposes
------------
1. Command Files (src/commands/):
   - add.js: Creates new expense records
   - budget.js: Manages monthly budgets
   - category.js: Handles expense categorization
   - delete.js: Removes expense records
   - export.js: Exports data to CSV
   - list.js: Displays expense records
   - report.js: Generates analysis reports
   - summary.js: Creates expense summaries
   - update.js: Modifies existing expenses

2. Models (src/models/):
   - expense.js: Defines expense data structure and validation

3. Utilities (src/utils/):
   - errors.js: Custom error handling
   - storage.js: Data persistence operations

4. Data Storage (data/):
   - expenses.json: Main data store
   - *.backup: Automatic backups

Dependencies
-----------
1. External:
   - commander: CLI framework
   - fs/promises: File operations
   - path: Path handling

2. Internal:
   - All commands depend on utils/storage.js
   - All commands use utils/errors.js
   - Add/Update use models/expense.js

Data Flow
---------
1. Command Processing:
   User Input → Command Parsing → Validation → Execution → Output

2. Data Operations:
   Read → Validate → Modify → Backup → Write → Confirm

3. Error Flow:
   Try → Catch → Log → Exit

Development Guidelines
--------------------
1. Adding New Commands:
   - Create command file in src/commands/
   - Import in index.js
   - Add to command registry
   - Update documentation

2. Data Model Changes:
   - Update expense.js model
   - Update validation rules
   - Handle data migration
   - Update affected commands

3. Storage Modifications:
   - Modify storage.js
   - Update backup procedures
   - Ensure backward compatibility
   - Test data integrity

4. Error Handling:
   - Use custom error classes
   - Implement proper error recovery
   - Maintain data consistency
   - Provide clear error messages

Testing Structure
---------------
1. Unit Tests:
   - Command validation
   - Data model integrity
   - Storage operations
   - Error handling

2. Integration Tests:
   - Command execution
   - Data persistence
   - Error recovery
   - User feedback

3. System Tests:
   - Full workflow testing
   - Data consistency
   - Performance testing
   - Edge cases 

ID Management System
------------------
1. Expense IDs:
   - Auto-incrementing numeric IDs
   - Stored in metadata.lastId
   - Never reused after deletion
   - Format: Positive integers (1, 2, 3, ...)

2. ID Generation Process:
   - Read current lastId from metadata
   - Increment by 1
   - Assign to new expense
   - Update metadata.lastId
   - Save changes

3. ID Validation:
   - Must be positive number
   - Must be unique
   - Must exist for updates/deletes
   - Cannot be modified after creation

4. ID Storage:
   Data Structure:
   {
     "expenses": [
       { "id": 1, ... },
       { "id": 2, ... }
     ],
     "metadata": {
       "lastId": 2  // Tracks highest used ID
     }
   }

5. ID Operations:
   - Creation: getNextId() in storage.js
   - Validation: Before all operations
   - Lookup: Used in find/update/delete
   - Reference: Used in relationships

6. ID Safety Features:
   - Backup before ID assignment
   - No ID reuse after deletion
   - ID integrity checks
   - Collision prevention

7. ID-Related Methods:
   storage.js:
   - getNextId(): Get next available ID
   - validateId(): Check ID existence
   - findById(): Locate expense by ID

8. ID Usage Examples:
   - Add: ID auto-assigned
     expense.id = await storage.getNextId();
   
   - Update: ID required
     update -i 1 -a 50.00
   
   - Delete: ID required
     delete -i 1

9. ID Error Handling:
   - Invalid ID format
   - Non-existent ID
   - Duplicate ID prevention
   - ID range validation

10. ID Performance:
    - O(1) ID generation
    - O(n) ID lookup
    - ID indexing for large datasets
    - Cached ID validation

Future Implementations
--------------------
1. Enhanced Data Management:
   - Multi-currency support
   - Receipt image storage and OCR
   - Location tracking for expenses
   - Vendor/merchant database
   - Payment method tracking
   - Recurring expense automation
   - Data compression
   - Database migration (JSON to SQLite/MongoDB)

2. Security Enhancements:
   - User authentication system
   - Data encryption
   - Access logging
   - Multi-user support with roles
   - Encrypted backups
   - API key management
   - Session management
   - Audit trails

3. Advanced Analytics:
   - Machine learning predictions
   - Spending pattern detection
   - Custom report templates
   - Interactive charts/graphs
   - PDF report generation
   - Email notifications
   - Budget recommendations
   - Anomaly detection

4. External Integrations:
   - Bank API connections
   - Mobile companion app
   - Cloud sync (Google Drive/Dropbox)
   - Bank statement imports
   - Accounting software exports
   - Calendar integration
   - SMS notifications
   - Email reports

5. Performance Optimizations:
   - Caching system
   - Batch operations
   - Index optimization
   - Query optimization
   - Backup compression
   - Memory management
   - Load balancing
   - Data partitioning

6. User Experience:
   - Interactive CLI mode
   - Command autocomplete
   - Color-coded output
   - Progress indicators
   - Configuration profiles
   - Command aliases
   - Help wizard
   - Custom themes

7. Budget Features:
   - Rolling budgets
   - Budget templates
   - Seasonal adjustments
   - Group budgets
   - Smart alerts
   - Savings goals
   - Investment tracking
   - Debt management

8. Category System:
   - Subcategories
   - Category rules
   - Auto-categorization
   - Category merging
   - Smart analytics
   - Category templates
   - Dynamic categories
   - Category hierarchies

9. Development Tools:
   - CLI development kit
   - Plugin system
   - Custom commands
   - Middleware support
   - Event system
   - Debug mode
   - Testing framework
   - Development console

10. Documentation:
    - API documentation
    - Developer guides
    - User manuals
    - Video tutorials
    - Example scenarios
    - Troubleshooting guides
    - Integration guides
    - Best practices

Implementation Priority:
----------------------
Phase 1 (Core Enhancement):
- Database migration
- Basic authentication
- Data encryption
- Backup improvements

Phase 2 (Feature Extension):
- Multi-currency support
- Receipt storage
- Advanced reporting
- Email notifications

Phase 3 (Integration):
- Bank API integration
- Mobile app development
- Cloud sync
- External exports

Phase 4 (Advanced Features):
- Machine learning
- Advanced analytics
- Custom automation
- API development